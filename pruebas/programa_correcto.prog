main
{

	local {
		int	v,b,n,k;
		float vf,s,d, f ;
		char vc ;
		bool v1 ;
		list_of int pe, pe2 ;
		list_of  float pf, pf2 ;
		list_of bool p1;
		list_of char pd;
		list_of    int ppf;
	}



 int funcionA (int a1, float a2, float d3) {
 		local {
			int x1, x2 ;
		}

		char funcionB(char b1, bool b2) {
			local {
				float xf, x2 ;
			}

			float funcionC (bool c1, int c2) {
				local {
					float x1;
				}

				x1 = 1.3;
				if (c2>10)
					c2= c2-1 ;
				else
					x1= 3.1 ;
				return x1;
			}

			xf = funcionC (true, 10);
			x2 = xf * (funcionC(false, 1)-funcionC(true,23)) /10.0;

			while (x2*funcionC(false,1)-xf<10.0)
				x2 = x2*xf;
			}

		int funcionF() {

		}

		float funcionD (float d1) 			{
			local {
				char dato;
				int valor ;
			}

			char funcionE (char e1, char e2) {
				cout "introduzca ", (3-1), " caracteres: " ;
				if (e1 =='a')
					return e1 ;
				else
					return ' ';
			}

			cout "introduzca un valor entero" ;

			if (d1>0.0) {
				local {
					int dato ;
				}

				dato = 2;
				dato = valor*20/dato;
			} else {
				valor = valor * 100 ;
				d1 = d1/1000.0 ;
			}
			return 2.0 ;
		}

		return 2;
 	}

	do {
		v = v + b;
		vc = vc;
	} until (true);

	pe = [2+funcionA(1, 1.0, 1.0)];
	cout "pe = ", pe;
	pe = [1, 43, 5, 0, 0];
	ppf = pe;
	cout "pe = ppf = ", pe;
	cout "pe + 2 = ", pe + 2;
	cout "pe * 2 = ", pe * 2;
	cout "pe / 2 = ", pe / 2;
	cout "pe - 2 = ", pe - 2;
	cout "2 + pe = ", 2 + pe;
	pd = ['z', 'A', 'B'];
	cout "pd = ", pd;
	pd = pd ++ 't' @ 3;
	cout "Añadimos t en pos 3: ", pd;
	pf = [2.5, 4.9, 3.0, 0.0];
	cout "pf = ", pf;
	pf = pf + 1.0;
	cout "pf + 1.0 = ", pf;
	p1 = [true, false, true,true] ;
	cout "p1 = ", p1;
	pe >> ;
	cout "Adelantamos cursor pe: ", ? pe;
	pe << ;
	cout "Atrasamos cursor pe: ", ? pe;
	pe >>;
	pe >>;
	cout "Avanzamos dos cursor pe: ", ? pe;
	$pe ;
	cout "Inicio cursor pe: ", ? pe;
	cout "Si el tamaño de pe < 10 imprime 2ª pos, else 3ª pos: ";
	if (#pe < 10)
		cout "Tam pe < 10, pe[2] = ", pe @ 2;
	else
		cout "Tam pe >= 10, pe[3] = ", pe @ 3 ;

	cout "Unimos pe con (pff borrando a partir de pos 3) = ", pe ** (ppf % 3) ;
	cout "Insertamos true en p1 en pos 3 = ", p1 ++ true @ 3;
	cout "Quitamos elemento de pos (3 - 2) / 2 en pf = ", pf -- ((3 - 2) / 2);
	cout "Añadimos 3 a pe en pos 2 = ", pe ++ 3 @ 2;
	cout "pe / 3 = ", pe / 3;
}
